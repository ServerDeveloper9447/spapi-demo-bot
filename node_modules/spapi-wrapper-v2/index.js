const fetch = require('node-fetch')
const baseurl = "https://apiv2.spapi.ga"
const fun = baseurl + '/fun'
const misc = baseurl + '/misc'
const mc = baseurl + '/mc'
const img = baseurl + '/image'

// Fun endpoints
/**
 * 
 * @param {String} keyword 
 * @param {Number} num 
 */
async function imagesearch(keyword, num) {
    if (!keyword && !num) {
        return("[SPAPI-Wrapper-V2: imageseach()]: No keyword or num query.")
    } else {
        try {
            const fetched = await fetch(fun + `/imagesearch?search=${encodeURIComponent(keyword)}&num=${num}`)
            const r = await fetched.json()
            return (r)
        } catch(error) {
            return("[SPAPI-Wrapper-V2: imagesearch()]: Some error occurred.")
        }
    }
}
/**
 * 
 * @param {String} pokemon 
 */
async function pokeinfo(pokemon) {
    if (!pokemon) {
        return("[SPAPI-Wrapper-V2: pokeinfo()]: No pokemon name query")
    } else {
        try {
            const fetched = await fetch(fun + `/pokemon?name=${encodeURIComponent(pokemon)}`)
            const r = await fetched.json()
            return (r)
        } catch(error) {
            return("[SPAPI-Wrapper-V2: pokeinfo()]: Some error occurred.")
        }
    }
}
/**
 * 
 * @param {String} category 
 */
async function trivia(category) {
    if (!category) {
        return("[SPAPI-Wrapper-V2: trivia()]: No category given.")
    } else {
        try {
            const fetched = await fetch(fun + `/trivia?category=${encodeURIComponent(category)}`)
            const r = await fetched.json()
            return (r)
        } catch (error) {
            return("[SPAPI-Wrapper-V2: trivia()]: Some error occurred.")
        }
    }
}
/**
 * 
 * @param {String} keyword 
 */
async function gsearch(keyword) {
    if (!keyword) {
        return("[SPAPI-Wrapper-V2: gsearch()]: No keyword.")
    } else {
        try {
            const fetched = await fetch(fun + `/gsearch?search=${encodeURIComponent(keyword)}`)
            const r = await fetched.json()
            return (r)
        } catch(err) {
            return("[SPAPI-Wrapper-V2: gsearch()]: Some error occurred.")
        }
    }
}
/**
 * 
 * @param {String} keyword 
 */
async function wikipedia(keyword) {
    if (!keyword) {
        return("[SPAPI-Wrapper-V2: wikipedia()]: No keyword.")
    } else {
        try {
            const fetched = await fetch(fun + `/wikipedia?search=${encodeURIComponent(keyword)}`)
            const r = await fetched.json()
            return (r)
        } catch (err) {
            return("[SPAPI-Wrapper-V2: wikipedia()]: Some error occurred.")
        }
    }
}
/**
 * 
 * @param {String} text 
 */
async function ytsresults(text) {
    if (!text) {
        return("[SPAPI-Wrapper-V2: ytsresults()]: No text to search.")
    } else {
        try {
            const fetched = await fetch(fun + `/ytsearch?search=${encodeURIComponent(text)}`)
            const r = await fetched.json()
            return r
        } catch(err) {
            return("[SPAPI-Wrapper-V2: ytsresults()]: Some error occurred.")
        }
    }
}
async function codefacts() {
    try {
        const fetched = await fetch(fun + `/codefacts`)
        const r = await fetched.json()
        return r.fact
    } catch(err) {
        return("[SPAPI-Wrapper-V2: codefacts()]: Some error occurred.")
    }
}
/**
 * 
 * @param {String} movie 
 */
async function imdb(movie) {
    try {
        if (!movie) {
            return("[SPAPI-Wrapper-V2: imdb()]: No movie name provided.")
        } else {
        const fetched = await fetch(fun + `/imdb?movie=${encodeURIComponent(movie)}`)
        const r = await fetched.json()
        return r
        }
    } catch(err) {
        return("[SPAPI-Wrapper-V2: imdb()]: Some error occurred.")
    }
}
/**
 * 
 * @param {String} username
 */
async function iguser(username) {
    if(!username) {
        return("[SPAPI-Wrapper-V2: iguser()]: No username provided.")
    } else {
        try {
            const fetched = await fetch(fun + `/iguser?username=${encodeURIComponent(username)}`)
            const r = await fetched.json()
            return (r)
        } catch(err) {
            return("[SPAPI-Wrapper-V2: iguser()]: Some error occurred.")
        }
    }
}
/**
 * 
 * @param {String} songname 
 */
async function spotify(url) {
    if (!url) {
        return("[SPAPI-Wrapper-V2: spotify()]: No song url provided.")
    } else {
        try {
            const fetched = await fetch(fun + `/spotify?url=${encodeURIComponent(url)}`)
            const r = await fetched.json()
            return (r)
        } catch(err) {
            return("[SPAPI-Wrapper-V2: spotify()]: Some error occurred.")
        }
    }
}
/**
 * 
 * @param {String} message 
 */
async function cowsay(message) {
    if (!message) {
        return("[SPAPI-Wrapper-V2: cowsay()]: No message provided.")
    } else {
        try {
            const fetched = await fetch(fun + `/cowsay?say=${encodeURIComponent(message)}`)
            const r = await fetched.json()
            return (r.data)
        } catch(err) {
            return("[SPAPI-Wrapper-V2: cowsay()]: Some error occurred.")
        }
    }
}
async function asciicat() {
    try {
        const fetched = await fetch(fun + `/ascat`)
        const r = await fetched.json()
        return (r.cat)
    } catch(err) {
        return("[SPAPI-Wrapper-V2: asciicat()]: Some error occurred.")
    }
}
async function soi() {
    try {
        const fetched = await fetch(fun + `/soi`)
        const r = await fetched.json()
        return (r.video)
    } catch(err) {
        return("[SPAPI-Wrapper-V2: soi()]: Some error occurred.")
    }
}
async function randtopic() {
    try {
        const fetched = await fetch(fun + `/randomtopic`)
        const r = await fetched.json()
        return (r.question)
    } catch(err) {
        return("[SPAPI-Wrapper-V2: randtopic()]: Some error occurred.")
    }
}
/**
 * 
 * @param {Number} amount
 * @param {String} from
 * @param {String} to
 */
async function currency(amount, from, to) {
    if (!amount || !from || !to) {
        return("[SPAPI-Wrapper-V2: currency()]: No amount, from or to currency provided.")
    } else {
        try {
        const fetched = await fetch(fun + `/currency?amount=${encodeURIComponent(amount)}&from=${encodeURIComponent(from)}&to=${encodeURIComponent(to)}`)
        const r = await fetched.json()
        return (r)
        } catch(err) {
            return("[SPAPI-Wrapper-V2: currency()]: Some error occurred.")
        }
    }
}
/**
 * 
 * @param {String} url
 * @param {String} slug
 * @returns Statuscode 201 and shortend link if success.
 */
async function shorten(url, slug) {
    if (!url || !slug) {
        return("[SPAPI-Wrapper-V2: shorten()]: No url or slug provided.")
    } else {
        try {
            const fetched = await fetch(fun + `/shorten?url=${encodeURIComponent(url)}&slug=${encodeURIComponent(slug)}`)
            const r = await fetched.json()
            return (r)
        } catch(err) {
            return("[SPAPI-Wrapper-V2: shorten()]: Some error occurred.")
        }
    }
}
/**
 * 
 * @param {String} keyword 
 */
async function ytvinfo(keyword) {
    if (!keyword) {
        return("[SPAPI-Wrapper-V2: ytvinfo()]: No keyword provided.")
    } else {
        try {
            const fetched = await fetch(fun + `/ytvinfo?search=${encodeURIComponent(keyword)}`)
            const r = await fetched.json()
            return (r)
        } catch(err) {
            return("[SPAPI-Wrapper-V2: ytvinfo()]: Some error occurred.")
        }
    }
}
async function tide() {
    try {
        const fetched = await fetch(fun + `/thisidea`)
        const r = await fetched.json()
        return (r.idea)
    } catch(err) {
        return("[SPAPI-Wrapper-V2: tide()]: Some error occurred.")
    }
}

/**
 * @param {String} username
 */

async function twitteruser(username) {
    if (!username) {
        return("[SPAPI-Wrapper-V2: twitteruser()]: No username provided.")
    } else {
        try {
            const fetched = await fetch(fun + `/twitter?user=${encodeURIComponent(username)}`)
            const r = await fetched.json()
            return (r)
        } catch(err) {
            return("[SPAPI-Wrapper-V2: twitteruser()]: Some error occurred.")
        }
    }
}
// end of fun endpoints

//Misc endpoints
/**
 * 
 * @param {String} message 
 */
async function cleverbot(message) {
    if (!message) {
        return("[SPAPI-Wrapper-V2: cleverbot()]: No message.")
    } else {
        try {
            const fetched = await fetch(misc + `/clever?text=${encodeURIComponent(message)}`)
            const r = await fetched.json()
            return (r.response)
        } catch(err) {
            return("[SPAPI-Wrapper-V2: cleverbot()]: Some error occurred.")
        }
    }
}
/**
 * @param {String} method Encode or Decode
 * @param {String} text Text to encode or decode
 * @param {Number} shift Shift to the right
 */
async function caeser(method, text, shift) {
    if (!method || !text) {
        return("[SPAPI-Wrapper-V2: caeser()]: No method or text or shift.")
    } else {
        try {
        if (method === "encode") {
            if (!shift) {
                return("[SPAPI-Wrapper-V2: caeser()]: Shift param needed for encoding.")
            } else {
            const fetched = await fetch(misc + `/cipher/encode?text=${encodeURIComponent(text)}&a=${String(shift)}`)
            const r = await fetched.json()
            return r
            }
        } else if(method === "decode") {
            const fetched = await fetch(misc + `/cipher/decode?text=${encodeURIComponent(text)}`)
            const r = await fetched.json()
            return r
        } else {
            return ("[SPAPI-Wrapper-V2: caeser()]: Invalid method.")
        }
    } catch(err) {
        return("[SPAPI-Wrapper-V2: caeser()]: Some error occurred.")
    }
    }
}
/**
 * @param {String} keyword
 */
async function tenor(keyword) {
    if (!keyword) {
        return("[SPAPI-Wrapper-V2: tenor()]: No keyword provided.")
    } else {
        try {
        const fetched = await fetch(misc + `/tenor?search=${encodeURIComponent(keyword)}`)
        const r = await fetched.json()
        return r
        } catch (err) {
            return("[SPAPI-Wrapper-V2: tenor()]: Some error occurred.")
        }
    }
}
/**
 * @param {String} text
 */
async function base64(text) {
    if (!text) {
        return("[SPAPI-Wrapper: base64()]: No text provided.")
    } else {
        try {
            const fetched = await fetch(misc + `/base64?text=${encodeURIComponent(text)}`)
            const r = await fetched.json()
            return r
        } catch (err) {
            return("[SPAPI-Wrapper-V2: base64()]: Some error occurred.")
        }
    }
}
/**
 * @param {String} pkg
 */
async function pypi(pkg) {
    if (!pkg) {
        return("[SPAPI-Wrapper-V2: pypi()]: No pkg provided.")
    } else {
        try {
            const fetched = await fetch(misc + `/pypi?pkg=${encodeURIComponent(pkg)}`)
            const r = await fetched.json()
            return r
        } catch(err) {
            return("[SPAPI-Wrapper-V2: pypi()]: Some error occurred.")
        }
    }
}
/**
 * 
 * @param {String} keyword 
 */
async function googlenews(keyword) {
    if (!keyword) {
        return("[SPAPI-Wrapper-V2: googlenews()]: No keyword provided.")
    } else {
        try {
            const fetched = await fetch(misc + `/news?search=${encodeURIComponent(keyword)}`)
            const r = await fetched.json()
            return r
        } catch(err) {
            return("[SPAPI-Wrapper-V2: googlenews()]: Some error occurred.")
        }
    }
}

async function riddle() {
    try {
        const fetched = await fetch(misc + `/riddles`)
        const r = await fetched.json()
        return r
    } catch(err) {
        return("[SPAPI-Wrapper-V2: riddle()]: Some error occurred.")
    }
}

/**
 * 
 * @param {String} type Must be either "name" or "number"
 * @param {String} data If type if name then provide name and if type is number then provide number
 */

async function periodic(type, data) {
    if (!type || !data) {
        return("[SPAPI-Wrapper-V2: periodic()]: No type or data provided.")
    } else {
        switch(type) {
            case "name":
                if (isNaN(data) === false) {
                    return("[SPAPI-Wrapper-V2: periodic()]: Data must be name.")
                } else {
                    try {
                        const fetched = await fetch(misc + `/periodic?type=name&data=${encodeURIComponent(data)}`)
                        const r = await fetched.json()
                        return r
                    } catch(err) {
                        return("[SPAPI-Wrapper-V2: periodic()]: Some error occurred.")
                    }
                }
                break;
            case "number":
                if (isNaN(data)) {
                    return("[SPAPI-Wrapper-V2: periodic()]: Invalid number.")
                } else {
                    try {
                        const fetched = await fetch(misc + `/periodic?type=number&data=${encodeURIComponent(data)}`)
                        const r = await fetched.json()
                        return r
                    } catch(err) {
                        return("[SPAPI-Wrapper-V2: periodic()]: Some error occurred.")
                    }
                }
                break;
            default:
                return("[SPAPI-Wrapper-V2: periodic()]: Invalid type.")        
            }
    }
}

// end of misc endpoints

// minecraft endpoints
/**
 * 
 * @param {String} host 
 */
async function getJavaServer(host) {
    if (!host) {
        return ("[SPAPI-Wrapper-V2: getJavaServer()]: No host provided.")
    } else {
        try {
            const fetched = await fetch(mc + `/java?host=${encodeURIComponent(host)}`)
            const r = await fetched.json()
            return r
        } catch(err) {
            return("[SPAPI-Wrapper-V2: getJavaServer()]: Some error occurred.")
        }
    }
}
/**
 * 
 * @param {String} host 
 */
async function getBedrockServer(host) {
    if (!host) {
        return("[SPAPI-Wrapper-V2: getBedrockServer()]: No host provided.")
    } else {
        try {
            const fetched = await fetch(mc + `/bedrock?host=${encodeURIComponent(host)}`)
            const r = await fetched.json()
            return r
        } catch (err) {
            return("[SPAPI-Wrapper-V2: getBedrockServer()]: Some error occurred.")
        }
    }
}
// end of mc endpoints

// image endpoints
/**
 * 
 * @param {String} mcserver 
 */
function servericon(mcserver) {
    if (!mcserver) {
        return("[SPAPI-Wrapper-V2: servericon()]: No mcserver provided.")
    } else {
        return(img + `/mcicon?host=${encodeURIComponent(mcserver)}`)
    }
}/**
 * @param {String} data
 */
function barcode(data) {
    if (!data) {
        return("[SPAPI-Wrapper-V2: barcode()]: No data provided.")
    } else {
        return(img + `/barcode?data=${encodeURIComponent(data)}`)
    }
}

/**
 * 
 * @param {String} text 
 */

function toi(text) {
    if (!data) {
        return("[SPAPI-Wrapper-V2: toi()]: No data provided.")
    } else {
        return(img + `/imgtext?text=${encodeURIComponent(data)}`)
    }
}

/**
 * @param {String} text
 * @param {String} username
 * @param {String} image
 * @param {String} color
 */

function dfake(text, username, image, color) {
    if (!text || !username || !image || !color) {
        return("[SPAPI-Wrapper-V2: dfake()]: No text, username, image or color provided.")
    } else {
        return(img + `/dfake?text=${encodeURIComponent(text)}&uname=${encodeURIComponent(username)}&pfp=${encodeURIComponent(image)}&color=${encodeURIComponent(color)}`)
    }
}

/**
 * @param {String} text
 */

function clyde(text) {
    if (!text) {
        return("[SPAPI-Wrapper-V2: clyde()]: No text provided.")
    } else {
        return(img + `/clyde?text=${encodeURIComponent(text)}`)
    }
}

/**
 * @param {String} comment
 * @param {String} username
 * @param {String} image
 */
function phub(comment, username, image) {
    if (!comment || !username || !image) {
        return("[SPAPI-Wrapper-V2: phub()]: No comment, username or image provided.")
    } else {
        return(img + `/phub?comment=${encodeURIComponent(comment)}&name=${encodeURIComponent(username)}&pfp=${encodeURIComponent(image)}`)
    }
}

/**
 * @param {String} text
 * @param {String} username
 * @param {String} image
 * @param {String} device (Optional)
 */
function tweet(text, username, image, device) {
    if (!text || !username || !image) {
        return("[SPAPI-Wrapper-V2: tweet()]: No text, username or image provided.")
    } else {
        if (device) {
            return(img + `/tweet?text=${encodeURIComponent(text)}&username=${encodeURIComponent(username)}&pfp=${encodeURIComponent(image)}&device=${encodeURIComponent(device)}`)
        } else {
            return(img + `/tweet?text=${encodeURIComponent(text)}&username=${encodeURIComponent(username)}&pfp=${encodeURIComponent(image)}`)
        }
    }
}

/**
 * @param {URL} image_url
 */
function gay(image_url) {
     if (!image_url) {
         return("[SPAPI-Wrapper-V2: gay()]: No image url provided.")
     } else {
        return (img + `/gay?image=${encodeURIComponent(image_url)}`)
     }
}

/**
 * @param {String} image_url
 */
function stonks(image_url) {
    if (!image_url) {
        return("[SPAPI-Wrapper-V2: stonks()]: No image url provided.")
    } else {
        return (img + `/stonks?image=${encodeURIComponent(image_url)}`)
    }
}

/**
 * @param {String} image_url
 */
function not_stonks(image_url) {
    if (!image_url) {
        return("[SPAPI-Wrapper-V2: not_stonks()]: No image url provided.")
    } else {
        return (img + `/notstonks?image=${encodeURIComponent(image_url)}`)
    }
}
/**
 * @param {String} image_url
 */
function confusedstonks(image_url) {
    if (!image_url) {
        return("[SPAPI-Wrapper-V2: confusedstonks()]: No image url provided.")
    } else {
        return (img + `/confusedstonks?image=${encodeURIComponent(image_url)}`)
    }
}
/**
 * @param {String} text
 * @param {String} corner-image
 * @param {String} captcha-image
 */
function captchameme(text, corner_image, captcha_image) {
    if (!text || !corner_image || !captcha_image) {
        return("[SPAPI-Wrapper-V2: captchameme()]: No text, corner image or captcha image provided.")
    } else {
        return(img + `/captcha?text=${encodeURIComponent(text)}&cornimg=${encodeURIComponent(corner_image)}&capimg=${encodeURIComponent(captcha_image)}`)
    }
}

/**
 * @param {String} image_url
 * @param {String} text
 */
function wasted(image_url, text) {
    if (!image_url) {
        return("[SPAPI-Wrapper-V2: wasted()]: No image url or text provided.")
    } else {
        return (img + `/wasted?image=${encodeURIComponent(image_url)}&text=${encodeURIComponent(text)}`)
    }
}

/**
 * @param {String} image_url
 */
function triggered(image_url) {
    if (!image_url) {
        return("[SPAPI-Wrapper-V2: triggered()]: No image url provided.")
    } else {
        return (img + `/triggered?image=${encodeURIComponent(image_url)}`)
    }
}
/**
 * @param {String} image_url
 * @param {String} h1
 * @param {String} h2
 */
function what(image_url, h1, h2) {
    if (!image_url || !h1 || !h2) {
        return("[SPAPI-Wrapper-V2: what()]: No image url, h1 or h2 provided.")
    } else {
        return (img + `/what?image=${encodeURIComponent(image_url)}&h1=${encodeURIComponent(h1)}&h2=${encodeURIComponent(h2)}`)
    }
}

/**
 * @param {String} image_url
 */
function superiority(image_url) {
    if (!image_url) {
        return("[SPAPI-Wrapper-V2: superiority()]: No image url provided.")
    } else {
        return (img + `/superiority?image=${encodeURIComponent(image_url)}`)
    }
}

//end of image endpoints

module.exports = {
    imagesearch,
    pokeinfo,
    trivia,
    gsearch,
    wikipedia,
    ytsresults,
    codefacts,
    imdb,
    iguser,
    spotify,
    cowsay,
    asciicat,
    soi,
    randtopic,
    currency,
    shorten,
    ytvinfo,
    tide,
    twitteruser,
    cleverbot,
    caeser,
    tenor,
    base64,
    pypi,
    googlenews,
    riddle,
    periodic,
    getJavaServer,
    getBedrockServer,
    servericon,
    barcode,
    toi,
    dfake,
    clyde,
    phub,
    tweet,
    gay,
    stonks,
    not_stonks,
    confusedstonks,
    captchameme,
    wasted,
    triggered,
    what,
    superiority
}